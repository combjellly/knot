--https://github.com/purescript-contrib/purescript-string-parsers
--https://thimoteus.github.io/posts/2016-05-16-calculator.html
module ParserNew where

import Prelude


import Text.Parsing.Parser 
import Text.Parsing.Parser.Pos
import Text.Parsing.Parser.Language (emptyDef)
import Text.Parsing.Parser.Token (GenLanguageDef(..),LanguageDef,unGenLanguageDef,TokenParser,GenTokenParser,makeTokenParser)
import Text.Parsing.Parser.Combinators
import Data.List.NonEmpty
import Data.Identity
import Effect.Console

import Data.Int (toNumber)
import Data.Array (many)
import Data.List
import Data.Either

import AST

-- our main function
parseProgram :: String -> Either String Program
parseProgram x = case (runParser x program) of
  Left err -> Left $ showParseError err
  Right prog -> Right prog


testp :: Parser String String
testp = do
  _ <- reserved "every"
  b <- reserved "action"
  pure defaultLoop

parse :: String -> Either ParseError String
-- parse :: String -> Either ParseError Loop
parse x = do
    runParser x testp

showParseError :: ParseError -> String
showParseError (ParseError e (Position p)) = show p.line <> ":" <> show p.column <> " " <> e

-- tokenParser
type P a = ParserT String Identity a

program :: P Program
program = sepBy statement (reservedOp ";")


statement :: P Statement
statement = (Element <$> element) 


element :: P Element
element = choice [
  (Loop <$> loop),
  (Action <$> action)
  ]

loop :: P Loop
loop = reserved "every" $> defaultLoop

action :: P Action
action = reserved "play" $> defaultAction

tokenParser :: GenTokenParser String Identity
tokenParser = makeTokenParser $ LanguageDef (unGenLanguageDef emptyDef) {
  reservedNames = ["every","play"],
  reservedOpNames = [";"]
  }

number :: P Number
number = choice [
  try $ float, -- issue here with parsing negative floats: https://github.com/purescript-contrib/purescript-parsing/pull/142
  toNumber <$> integer
  ]

angles :: forall a. P a -> P a
angles = tokenParser.angles

braces :: forall a. P a -> P a
braces = tokenParser.braces

brackets :: forall a. P a -> P a
brackets = tokenParser.brackets

charLiteral :: P Char
charLiteral = tokenParser.charLiteral

colon :: P String
colon = tokenParser.colon

comma :: P String
comma = tokenParser.comma

commaSep :: forall a. P a -> P (List a)
commaSep = tokenParser.commaSep

commaSep1 :: forall a. P a -> P (NonEmptyList a)
commaSep1 = tokenParser.commaSep1

decimal :: P Int
decimal = tokenParser.decimal

dot :: P String
dot = tokenParser.dot

float :: P Number
float = tokenParser.float

hexadecimal :: P Int
hexadecimal = tokenParser.hexadecimal

identifier :: P String
identifier = tokenParser.identifier

integer :: P Int
integer = tokenParser.integer

lexeme :: forall a. P a -> P a
lexeme = tokenParser.lexeme

natural :: P Int
natural = tokenParser.natural

naturalOrFloat :: P (Either Int Number)
naturalOrFloat = tokenParser.naturalOrFloat

octal :: P Int
octal = tokenParser.octal

operator :: P String
operator = tokenParser.operator

parens :: forall a. P a -> P a
parens = tokenParser.parens

reserved :: String -> P Unit
reserved = tokenParser.reserved

reservedOp :: String -> P Unit
reservedOp = tokenParser.reservedOp

semi :: P String
semi = tokenParser.semi

semiSep :: forall a. P a -> P (List a)
semiSep = tokenParser.semiSep

semiSep1 :: forall a. P a -> P (NonEmptyList a)
semiSep1 = tokenParser.semiSep1

stringLiteral :: P String
stringLiteral = tokenParser.stringLiteral

symbol :: String -> P String
symbol = tokenParser.symbol

whiteSpace :: P Unit
whiteSpace = tokenParser.whiteSpace



